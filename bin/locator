#!/usr/bin/env ruby

# Copyright (c) 2020 Shuntai Zhou (shuntai.zhou@gmail.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'viral_seq'
require 'csv'
require 'optparse'
require 'colorize'

def myparser
  options = {}
  OptionParser.new do |opts|
    opts.banner = "#{"Usage:".red.bold} locator #{"-i".blue.bold} [nt_sequence_fasta_file] #{"-o".blue.bold} [locator_info_csv_file] #{"-r".blue.bold} [reference_genome_option]"

    opts.on('-i', '--infile FASTA_FILE', "#{"nt sequence".blue.bold} file in FASTA format") do |i|
      options[:infile] = i
    end

    opts.on('-o', '--outfile CSV_FILE', "output .csv file for locator info, default as \#\{infile\}.csv") do |o|
      options[:outfile] = o
    end

    opts.on('-r', '--ref_option OPTION', "reference genome option, choose from #{"`HXB2` (default), `SIVmm239`".blue.bold}") do |o|
      options[:ref_option] = o.to_sym
    end

    opts.on("-h", "--help", "Prints this help") do
      puts opts
      exit
    end

    opts.on("-v", "--version", "Version number of RubyGem::ViralSeq") do
      puts opts
      exit
    end

  end.parse!
  return options
end

puts "\n" + "Sequence Locator (RubyGem::ViralSeq Version #{ViralSeq::VERSION})".red.bold + " by " + "Shuntai Zhou".blue.bold
puts "See details at " +  "https://github.com/ViralSeq/viral_seq\n".blue
puts "Resembling" + " Sequence Locator ".magenta.bold + "from LANL" + " (https://www.hiv.lanl.gov/content/sequence/LOCATE/locate.html)\n".blue

ARGV << '-h' if ARGV.size == 0

options = myparser

begin
  if options[:infile]
    seq_file = options[:infile]
  else
    raise StandardError.new("Input file sequence file not found".red.bold)
  end

  if options[:outfile]
    csv_file = options[:outfile]
  else
    csv_file = seq_file + ".csv"
  end

  unless File.exist?(seq_file)
    raise StandardError.new("Input file sequence file not found".red.bold)
  end

  seqs = ViralSeq::SeqHash.fa(seq_file)
  opt =  options[:ref_option] ? options[:ref_option] : :HXB2

  unless [:HXB2, :SIVmm239].include? opt
    puts "Reference option `#{opt}` not recognized, using `HXB2` as the reference genome.".red.bold
    opt = :HXB2
  end

  locs = seqs.loc(opt)
  head = ["title", "sequence", "ref", "direction", "start", "end", "similarity", "indel", "aligned_input", "aligned_ref"]
  locs.unshift(head)
  data = CSV.generate do |csv|
    locs.each {|loc| csv << loc}
  end

  File.write(csv_file, data)
  puts "Output file found at #{csv_file.green.bold}"
rescue StandardError => e
  puts e.message
  puts "\n"
  ARGV.clear
  ARGV << '-h'
  myparser
end
